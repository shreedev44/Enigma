services:
  authentication-service:
    build: 
      context: ./authentication/
      dockerfile: Dockerfile
    container_name: enigma-authentication
    volumes:
      - ./authentication:/app
      - /app/node_modules 
    command: sh -c "npm install && npm run dev"
    depends_on:
      - redis
    networks:
      - enigma-network

  notification-service:
    build:
      context: ./notification/
      dockerfile: Dockerfile
    container_name: enigma-notification
    volumes:
      - ./notification:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - enigma-network

  dind:
    image: docker:24-dind
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR= 
    command: ["--host=tcp://0.0.0.0:2375", "--tls=false"]
    networks:
      - enigma-network
    volumes:
      - temp-storage:/app/temp
      - dind-storage:/var/lib/docker
    ports:
      - "2375"
    restart: always
    logging:
      driver: none

  problem-service:
    build: 
      context: ./problem/
      dockerfile: Dockerfile
    container_name: enigma-problem
    environment:
      - DOCKER_HOST=tcp://dind:2375
    volumes:
      - ./problem:/app 
      - /app/node_modules 
      - temp-storage:/app/temp
    command: sh -c "npm install && npm run dev"
    networks:
      - enigma-network
    depends_on:
      - dind

  job-service:
    build:
      context: ./job/
      dockerfile: Dockerfile
    container_name: enigma-job
    volumes:
      - ./job:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - enigma-network

  api-gateway:
    build: 
      context: ./api-gateway/
      dockerfile: Dockerfile
    container_name: enigma-api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./api-gateway:/app
      - /app/node_modules 
    command: sh -c "npm install && npm run dev"
    networks:
      - enigma-network

  redis:
    container_name: enigma-redis
    image: "redis:7.4"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - enigma-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - enigma-network
    logging:
      driver: none

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      GF_LOG_LEVELd: error
    networks:
      - enigma-network
    logging:
      driver: none

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - enigma-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 5s
      timeout: 3s
      retries: 3
    logging:
      driver: none

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3200:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - enigma-network
    logging:
      driver: none

volumes:
  redis-data:
  temp-storage:
  dind-storage:
  grafana-storage:

networks:
  enigma-network:
    driver: bridge