name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install and Lint Each Module
      run: |
        MODULES=("authentication" "problem" "job")

        for MODULE in "${MODULES[@]}"; do
          echo "üîç Linting $MODULE"
          cd server/$MODULE
          npm ci
          npm run lint
          cd ../..
        done

  format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Check Code Formatting with Prettier
      run: |
        MODULES=("authentication" "problem" "job")

        for MODULE in "${MODULES[@]}"; do
          echo "üé® Checking code format in $MODULE"
          cd server/$MODULE
          npm ci
          npm run format:check
          cd ../..
        done

  build:
    needs: [lint, format]
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Docker Login
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and Push Docker Images for All Services
      run: |
        MODULES=("api-gateway" "authentication" "problem" "job" "notification")

        for MODULE in "${MODULES[@]}"; do
          MODULE_PATH="server/$MODULE"
          if [ -f "$MODULE_PATH/VERSION" ]; then
            VERSION=$(cat "$MODULE_PATH/VERSION")
            IMAGE="${DOCKER_USERNAME}/enigma-$MODULE:v$VERSION"

            echo "üöÄ Building $IMAGE"
            docker build -f "$MODULE_PATH/Dockerfile.production" -t "$IMAGE" "$MODULE_PATH"
            docker push "$IMAGE"
          else
            echo "‚ö†Ô∏è Skipping $MODULE ‚Äî VERSION file not found at $MODULE_PATH"
          fi
        done

  deploy:
    needs: [build]
    runs-on: ubuntu-latest

    env:
      GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}

    steps:
    - name: Install GCloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GKE_PROJECT }}

    - name: Install GKE Auth Plugin
      run: |
        echo "üì¶ Installing gke-gcloud-auth-plugin from Google Cloud SDK repo"
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        sudo apt-get update
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Authenticate with GCP (via base64 key)
      run: |
        echo "${{ secrets.GKE_SA_KEY_BASE64 }}" | base64 -d > key.json
        gcloud auth activate-service-account --key-file=key.json
        gcloud config set project "${GKE_PROJECT}"
        gcloud auth list

    # - name: Get GKE Credentials
    #   run: |
    #     gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_ZONE" --project "$GKE_PROJECT"

    # - name: Apply Kubernetes Deployments
    #   run: |
    #     for MODULE in api-gateway authentication problem job notification; do
    #       YAML="server/k8s/production/gcp/services/$MODULE/deployment.yaml"
    #       if [ -f "$YAML" ]; then
    #         echo "üì¶ Applying $YAML"
    #         kubectl apply -f "$YAML"
    #       else
    #         echo "‚ùå No deployment.yaml for $MODULE at $YAML"
    #       fi
    #     done

    - name: Deploy via SSH
      run: |
        gcloud compute ssh ${{ secrets.GCE_INSTANCE_NAME }} \
          --zone=${{ secrets.GCE_ZONE }} \
          --project=${{ secrets.GCE_PROJECT }} \
          --command="sudo chown -R \$USER:\$USER /home/shreedev44/enigma \
          cd /home/shreedev44/enigma/server && \
          git config --global --add safe.directory /home/shreedev44/enigma && \
          git pull origin main && \
          ./scripts/deploy.sh" \
          --quiet
